package liquibase.change.core;

import liquibase.Liquibase;
import liquibase.change.*;
import liquibase.database.Database;
import liquibase.database.core.OracleDatabase;
import liquibase.diff.output.EbaoDiffOutputControl;
import liquibase.exception.ValidationErrors;
import liquibase.resource.ResourceAccessor;
import liquibase.statement.prepared.InsertExecutablePreparedStatement;
import liquibase.statement.prepared.InsertExecutablePreparedStatementChange;
import liquibase.statement.SqlStatement;
import liquibase.statement.core.InsertStatement;
import liquibase.util.StreamUtil;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * Inserts data into an existing table.
 */
@DatabaseChange(name="insert", description = "Inserts data into an existing table", priority = ChangeMetaData.PRIORITY_DEFAULT, appliesTo = "table")
public class InsertDataChange extends AbstractChange implements ChangeWithColumns<ColumnConfig>, DbmsTargetedChange, InsertExecutablePreparedStatementChange {

    private String catalogName;
    private String schemaName;
    private String tableName;
    private List<ColumnConfig> columns;
    private String dbms;

    public InsertDataChange() {
        columns = new ArrayList<ColumnConfig>();
    }

    @Override
    public ValidationErrors validate(Database database) {
        ValidationErrors validate = super.validate(database);
        validate.checkRequiredField("columns", columns);
        return validate;
    }

    @DatabaseChangeProperty(mustEqualExisting ="table.catalog", since = "3.0")
    public String getCatalogName() {
        return catalogName;
    }

    public void setCatalogName(String catalogName) {
        this.catalogName = catalogName;
    }

    @DatabaseChangeProperty(mustEqualExisting ="table.schema")
    public String getSchemaName() {
        return schemaName;
    }

    public void setSchemaName(String schemaName) {
        this.schemaName = schemaName;
    }

    @DatabaseChangeProperty(mustEqualExisting = "table", description = "Name of the table to insert data into")
    public String getTableName() {
        return tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    @Override
    @DatabaseChangeProperty(mustEqualExisting = "table.column", description = "Data to insert into columns", requiredForDatabase = "all")
    public List<ColumnConfig> getColumns() {
        return columns;
    }

    @Override
    public void setColumns(List<ColumnConfig> columns) {
        this.columns = columns;
    }

    @Override
    public void addColumn(ColumnConfig column) {
        columns.add(column);
    }

    public void removeColumn(ColumnConfig column) {
        columns.remove(column);
    }

    private SqlStatement[] cachedSqlStatements;

    @Override
    public SqlStatement[] generateStatements(Database database) {

        if (cachedSqlStatements != null) {
            return cachedSqlStatements;
        }

        if (Liquibase.isPreparedStatementPreferred()) {
            cachedSqlStatements = new SqlStatement[] { new InsertExecutablePreparedStatement(database, this) };
            return cachedSqlStatements;
        }

        boolean needsPreparedStatement = false;
        for (ColumnConfig column : columns) {
            if (column.getValueBlobFile() != null) {
                needsPreparedStatement = true;
            }
            if (column.getValueClobFile() != null) {
                needsPreparedStatement = true;
            }
            if (needsPreparedStatement) {
                break;
            }
//            if (column.getValueText() != null && database instanceof InformixDatabase) {
//                needsPreparedStatement = true;
//            }
        }

        if (!(database instanceof OracleDatabase)) {
            if (needsPreparedStatement) {
                return new SqlStatement[] { new InsertExecutablePreparedStatement(database, this) };
            }
        }
        
        InsertStatement statement = new InsertStatement(getCatalogName(), getSchemaName(), getTableName());

        for (ColumnConfig column : columns) {

        	if (database.supportsAutoIncrement()
        			&& column.isAutoIncrement() != null && column.isAutoIncrement()) {
            	// skip auto increment columns as they will be generated by the database
            	continue;
            }

        	statement.addColumnValue(column.getName(), column.getValueObject());
        	if (column.getValueBlobFile() != null || column.getValueClobFile() != null) {
        	    statement.addColumnValue(column.getName(), null);
            }
        }

        List<SqlStatement> sqlList = new ArrayList<SqlStatement>();
        sqlList.add(statement);
        
        String whereClause = getWhereClause4Lob();
        for (ColumnConfig column : columns) {
            if (column.getValueClobFile() != null) {
                InputStream stream = StreamUtil.getLobFileStream(getResourceAccessor(), column.getValueClobFile(), getChangeSet().getChangeLog().getPhysicalFilePath());
                List<String> clobSql = GenerateClobOrBlobSql.generateClobSql(stream, tableName, column.getName(), whereClause.toString());
                sqlList.addAll(GenerateClobOrBlobSql.sqlToRawSqlStatements(clobSql));
            } else if (column.getValueBlobFile() != null) {
                InputStream stream = StreamUtil.getLobFileStream(getResourceAccessor(), column.getValueBlobFile(), getChangeSet().getChangeLog().getPhysicalFilePath());
                List<String> blobSql = GenerateClobOrBlobSql.generateBlobSql(stream, tableName, column.getName(), whereClause.toString());
                sqlList.addAll(GenerateClobOrBlobSql.sqlToRawSqlStatements(blobSql));
            }
        }

        cachedSqlStatements = sqlList.toArray(new SqlStatement[sqlList.size()]);
        return cachedSqlStatements;
    }

    @Override
    public ChangeStatus checkStatus(Database database) {
        return new ChangeStatus().unknown("Cannot check insertData status");
    }

    /**
     * @see liquibase.change.Change#getConfirmationMessage()
     */
    @Override
    public String getConfirmationMessage() {
        return "New row inserted into " + getTableName();
    }

    @Override
    @DatabaseChangeProperty(since = "3.0", exampleValue = "h2, oracle")
    public String getDbms() {
        return dbms;
    }

    @Override
    public void setDbms(final String dbms) {
        this.dbms = dbms;
    }

    @Override
    public String getSerializedObjectNamespace() {
        return STANDARD_CHANGELOG_NAMESPACE;
    }
    
    public String getPrimaryKey() {
        throw new IllegalStateException();
    }
    
    private String getWhereClause4Lob() {
        StringBuilder whereClause = new StringBuilder("where ");
        for (ColumnConfig column : columns) {
            if (column.getValue() != null || column.getValueNumeric() != null) {
                if (whereClause.length() > "where ".length()) {
                    whereClause.append(" and ");
                }
                if (column.getValue() != null) {
                    whereClause.append(column.getName()).append("=")
                            .append(column.getValue());
                } else {
                    whereClause.append(column.getName()).append("=")
                            .append(column.getValueNumeric());
                }
            }
        }
        return whereClause.toString();
    }
}
